name: 'run_terraform'

on:
  workflow_call:
    inputs:
      environment:
        type: string
        description: repo environment
        required: true

jobs:
  run_terraform:
    environment: ${{ inputs.environment }}
    runs-on: ubuntu-latest

    env:
      ARM_CLIENT_ID: ${{ secrets.APPID }}
      ARM_CLIENT_SECRET: ${{ secrets.PASSWORD }}
      ARM_TENANT_ID: "9c29d70b-9e7a-44d5-abe2-7e53df86502f"
      ARM_SUBSCRIPTION_ID: "ff65e97e-c6be-4f35-b6b7-e52ce88bf5b2"
      ARM_SAS_TOKEN: ${{ secrets.ARM_SAS_TOKEN }}
      #STATE_KEY: "GitFlowTestPROD.tfstate"
      #BACKEND_FILE: ${{ github.workspace }}/${{ inputs.working_directory }}/../config/${{ inputs.config }}_backend.tf
      BACKEND_FILE: prod_backend.tf
      working-directory: ./terraform

    steps:

    - name: testoutput
      run: |
        echo ${{ env.working-directory }}/../config/${{ inputs.environment }}_backend.tf

    - name: Log in with Azure
      uses: azure/login@v1
      with:
        creds: '{"clientId":"${{ secrets.appId }}","clientSecret":"${{ secrets.password }}","subscriptionId":"ff65e97e-c6be-4f35-b6b7-e52ce88bf5b2","tenantId":"9c29d70b-9e7a-44d5-abe2-7e53df86502f"}'
    
    # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
    - uses: actions/checkout@v2
    - uses: hashicorp/setup-terraform@v1
        
    # Runs a single command using the runners shell
    - name: terraform-init
      id: init
      run: |
        cd ${{ env.working-directory }}
        terraform init -backend-config=${{ env.BACKEND_FILE }}
    
    - name: terraform-plan
      id: plan
      # env:
      #   ARM_CLIENT_ID: ${{ secrets.ARM_CLIENT_ID }}
      #   ARM_CLIENT_SECRET: ${{ secrets.ARM_CLIENT_SECRET }}
      #   ARM_TENANT_ID: ${{ secrets.ARM_TENANT_ID }}
      #   ARM_SUBSCRIPTION_ID: ${{ secrets.ARM_SUBSCRIPTION_ID }}
      #   ARM_SAS_TOKEN: ${{ secrets.ARM_SAS_TOKEN }}
      run: |
        cd ${{ env.working-directory }}
        terraform plan -no-color

    # - name: add-plan-comment
    #   id: comment
    #   uses: actions/github-script@v3
    #   if: github.event_name == 'pull_request'
    #   env:
    #     PLAN: "terraform\n${{ steps.plan.outputs.stdout }}"
    #   with:
    #     github-token: ${{ secrets.GITHUB_TOKEN }}
    #     script: |
    #       const output = `#### Terraform Format and Style üñå\`${{ steps.fmt.outcome }}\`
    #       #### Terraform Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
    #       #### Terraform Validation ü§ñ${{ steps.validate.outputs.stdout }}
    #       #### Terraform Plan üìñ\`${{ steps.plan.outcome }}\`
      
    #       <details><summary>Show Plan</summary>
          
    #       \`\`\`${process.env.PLAN}\`\`\`
          
    #       </details>
          
    #       *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`, Working Directory: \`${{ env.tf_actions_working_dir }}\`, Workflow: \`${{ github.workflow }}\`*`;
            
    #       github.issues.createComment({
    #         issue_number: context.issue.number,
    #         owner: context.repo.owner,
    #         repo: context.repo.repo,
    #         body: output
    #       })

    # - name: terraform-apply
    #   if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    #   id: apply
    #   env:
    #     ARM_CLIENT_ID: ${{ secrets.ARM_CLIENT_ID }}
    #     ARM_CLIENT_SECRET: ${{ secrets.ARM_CLIENT_SECRET }}
    #     ARM_TENANT_ID: ${{ secrets.ARM_TENANT_ID }}
    #     ARM_SUBSCRIPTION_ID: ${{ secrets.ARM_SUBSCRIPTION_ID }}
    #     ARM_SAS_TOKEN: ${{ secrets.ARM_SAS_TOKEN }}
    #   run: terraform apply -no-color -auto-approve
